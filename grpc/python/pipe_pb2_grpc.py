# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pipe_pb2 as pipe__pb2


class PiperStub(object):
  """the data pipe service definition
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Send = channel.unary_unary(
        '/pipe.Piper/Send',
        request_serializer=pipe__pb2.DataRequest.SerializeToString,
        response_deserializer=pipe__pb2.DataResponse.FromString,
        )


class PiperServicer(object):
  """the data pipe service definition
  """

  def Send(self, request, context):
    """processes request and sends a response
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PiperServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Send': grpc.unary_unary_rpc_method_handler(
          servicer.Send,
          request_deserializer=pipe__pb2.DataRequest.FromString,
          response_serializer=pipe__pb2.DataResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pipe.Piper', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
